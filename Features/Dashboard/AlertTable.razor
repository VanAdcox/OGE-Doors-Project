@inject FileProcessingService fps

<p>Table will go here</p>

<!--
-->

@code {
    protected override void OnInitialized()
    {
        fps.OnDataProcessed += OnDataProcessed;
    }

    private void OnDataProcessed()
    {
        var events = ImpossibleMovements();

        foreach (var ev in events)
        {
            Console.WriteLine(ev);
        }
        Console.WriteLine(events.Count);
    }

    // TODO: custom data type for this kind of alert
	private List<ReaderEvent> ImpossibleMovements() {
		List<ReaderEvent> warningScans = new List<ReaderEvent>();

		var groupedByIdHash = fps.ReaderEvents
		    .GroupBy(x => x.IdHash)
		    .OrderBy(g => g.Key)
		    .ToList();

		foreach (var group in groupedByIdHash)
		{
		    ReaderEvent lastEvent = null;
		    foreach (var readerEvent in group.OrderBy(x => x.EventTimeUTC))
		    {
			if (lastEvent != null && lastEvent.ReaderDesc != readerEvent.ReaderDesc && Math.Abs((lastEvent.EventTimeUTC - readerEvent.EventTimeUTC).TotalSeconds) <= 3)
			{
			    warningScans.Add(readerEvent);
			}
			lastEvent = readerEvent;
		    }
		}
		return warningScans;
	}
	private List<ReaderEvent> AbnormalHours() {
		List<ReaderEvent> abnormalEvents = new List<ReaderEvent>();
		return abnormalEvents;
	}



	// Alert Type | Date of Error | Relevent Scan(s) | Piece of Data
	public abstract class Alert {
		protected DateTime dateOfAlertUTC;
		protected List<ReaderEvent> relevantScans;
		protected String hashId;

		public abstract String getType(); // ie "abnormal-hours", "impossible-movement", etc
		public abstract String getDescription(); // ie Abnormal Hours returns "3:00-20:00" or Impossible Movements returns "2 scans within 2 seconds"
		public Alert(DateTime dateOfAlertUTC, List<ReaderEvent> relevantScans) {
			this.dateOfAlertUTC = dateOfAlertUTC;
			this.relevantScans = relevantScans;
		}
	}

	public class ImpossibleMovementAlert : Alert {
		public ImpossibleMovementAlert(DateTime dateOfAlertUTC, List<ReaderEvent> relevantScans) : base(dateOfAlertUTC, relevantScans) {}
		public override string getType() => "impossible-movement";
		public override string getDescription() => "User scans at multiple readers within 3 seconds";
	}
}

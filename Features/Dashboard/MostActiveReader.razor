@inject FileProcessingService fps


<MudPaper Class="pa-4 ma-2">
	@if(mostActiveReader != null) {
		<h2>Most Active Reader</h2>
		<p>DevId: @mostActiveReader.DevId, Machine: @mostActiveReader.Machine</p>
		<p>@mostActiveReader.Scans total scans</p>
	}
	else {
		<p>Loading...</p>
	}
</MudPaper>

@code {
	private dynamic mostActiveReader;

	protected override void OnInitialized() {
		fps.OnDataProcessed += Recalculate;
		fps.OnFilterChanged += Recalculate;
	}

	private async void Recalculate() {
		var filteredEvents = fps.GetFilteredEvents();
		if(filteredEvents != null && filteredEvents.Any()) {
			mostActiveReader = filteredEvents
				.GroupBy(e => new { e.DevId, e.Machine })
				.OrderByDescending(g => g.Count())
				.Select(g => new { g.Key.DevId, g.Key.Machine, Scans = g.Count() })
				.FirstOrDefault();
			await InvokeAsync(StateHasChanged);
		}
	}
}

@inject FileProcessingService fps


<MudPaper Class="pa-4 ma-2">
	@if(_series.Count != 0) {
		<h2>Scans Over Time</h2>
		<div style="display: flex; justify-content: center;">
			<div style="max-width: 100%; width: 100%;">
				<MudChart 
					ChartType="ChartType.Line"
					ChartSeries="@_series"
					XAxisLabels="@_xAxisLabels"
					ChartOptions="@_options"
					AxisChartOptions="@_axisChartOptions"
					Width="100%"
					Height="400px" />
			</div>
		</div>
	}
	else {
	    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="300px" Width="500px"/>
	}
</MudPaper>
@code {

	private List<ChartSeries> _series = new();
	private ChartOptions _options = new();
	private string[] _xAxisLabels = {};
	private AxisChartOptions _axisChartOptions = new();

	protected override void OnInitialized() {
		fps.OnDataProcessed += Recalculate;
		fps.OnFilterChanged += Recalculate;
		_options.ShowLegend = false;
		_axisChartOptions.MatchBoundsToSize = true;
		_axisChartOptions.LabelRotation = 45;
		_axisChartOptions.LabelExtraHeight = 10;
		_axisChartOptions.StackedBarWidthRatio = 0.1;
	}

	private async void Recalculate() {
		var filteredEvents = fps.GetFilteredEvents();

		if(filteredEvents != null && filteredEvents.Any()) {
			_series.Clear();
			_xAxisLabels = Array.Empty<string>();

			await InvokeAsync(StateHasChanged);  // for some reason mudcharts only update if you do it like this

			var dailyCounts = filteredEvents 
				.GroupBy(e => e.EventTimeUTC.Date)
				.OrderBy(g => g.Key)
				.Select(g => new
				{
					Date = g.Key.ToString("MMM dd"),
					Count = g.Count()
				})
				.ToList();
			_options.InterpolationOption = dailyCounts.Count < 4 
				? InterpolationOption.Straight 
				: InterpolationOption.NaturalSpline;

			_xAxisLabels = dailyCounts.Select(x => x.Date).ToArray();
			
			_series.Add(new ChartSeries{ 
					Name = "Scans",
					Data =  dailyCounts.Select(x => (double)x.Count).ToArray()
				}
			);
			await InvokeAsync(StateHasChanged);
		}
	}
}
